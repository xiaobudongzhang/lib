#include "../apue.h"
#include "../error.c"

volatile sig_atomic_t quitflag;

static void sig_int(int signo){
  
  if(signo==SIGINT)
    printf("\ninterrrupt\n");
  else if(signo==SIGQUIT)
    quitflag=1;
}


int main(void){
  
  sigset_t newmask,oldmask,zeromask;
  
  if(signal(SIGINT,sig_int)==SIG_ERR)
    err_sys("sig int err");
  if(signal(SIGQUIT,sig_int)==SIG_ERR)
    err_sys("sig quit err");
  
  sigemptyset(&zeromask);
  sigemptyset(&newmask);
  sigaddset(&newmask,SIGQUIT);

  if(sigprocmask(SIG_BLOCK,&newmask,&oldmask)<0)
    err_sys("sig_block err");

  printf("d);
  while(quitflag==0){
    printf("quit flag=%d\n",quitflag);
    sigsuspend(&zeromask);
  }

  quitflag=0;

  printf("end\n");
  if(sigprocmask(SIG_SETMASK,&oldmask,NULL)<0)
    err_sys("sig_setmask err");
  
  exit(0);
}
