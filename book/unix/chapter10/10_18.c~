#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
//pos.1 abort
void abort3(void){
  sigset_t mask;
  struct sigaction action;
  
  //cant ignore SIGABRT
  sigaction(SIGABRT,NULL,&action);
  if(action.sa_handler==SIG_IGN){
    action.sa_handler=SIG_DFL;
    sigaction(SIGABRT,&action,NULL);
  }

  if(action.sa_handler==SIG_DFL)
    fflush(NULL);
  
  //cant block SIGABRT
  sigfillset(&mask);
  sigdelset(&mask,SIGABRT);//turn off SIGABRT
  sigprocmask(SIG_SETMASK,&mask,NULL);
  kill(getpid(),SIGABRT);

  //last
  fflush(NULL);
  action.sa_handler=SIG_DFL;
  sigaction(SIGABRT,&action,NULL);
  sigprocmask(SIG_SETMASK,&mask,NULL);
  kill(getpid(),SIGABRT);
  
  printf("should not reach here\n");
  exit(1);
}


int main(void){
  printf("abort before\n");
  abort3(;
  printf("abort after\n");
  exit(0);
}
