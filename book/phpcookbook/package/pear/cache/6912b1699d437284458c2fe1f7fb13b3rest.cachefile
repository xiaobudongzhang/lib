a:16:{s:7:"attribs";a:4:{s:5:"xmlns";s:37:"http://pear.php.net/dtd/rest.release2";s:9:"xmlns:xsi";s:41:"http://www.w3.org/2001/XMLSchema-instance";s:11:"xmlns:xlink";s:28:"http://www.w3.org/1999/xlink";s:18:"xsi:schemaLocation";s:83:"http://pear.php.net/dtd/rest.release2     http://pear.php.net/dtd/rest.release2.xsd";}s:1:"p";a:2:{s:7:"attribs";a:1:{s:10:"xlink:href";s:16:"/rest/p/liveuser";}s:8:"_content";s:8:"LiveUser";}s:1:"c";s:12:"pear.php.net";s:1:"v";s:7:"0.16.14";s:1:"a";s:7:"0.16.12";s:2:"mp";s:5:"4.2.0";s:2:"st";s:4:"beta";s:1:"l";s:4:"LGPL";s:1:"m";s:8:"doconnor";s:1:"s";s:55:"User authentication and permission management framework";s:1:"d";s:1520:"LiveUser is a set of classes for dealing with user authentication
  and permission management. Basically, there are three main elements that
  make up this package:

  * The LiveUser class
  * The Auth containers
  * The Perm containers

  The LiveUser class takes care of the login process and can be configured
  to use a certain permission container and one or more different auth containers.
  That means, you can have your users' data scattered amongst many data containers
  and have the LiveUser class try each defined container until the user is found.
  For example, you can have all website users who can apply for a new account online
  on the webserver's local database. Also, you want to enable all your company's
  employees to login to the site without the need to create new accounts for all of
  them. To achieve that, a second container can be defined to be used by the LiveUser class.

  You can also define a permission container of your choice that will manage the rights for
  each user. Depending on the container, you can implement any kind of permission schemes
  for your application while having one consistent API.

  Using different permission and auth containers, it's easily possible to integrate
  newly written applications with older ones that have their own ways of storing permissions
  and user data. Just make a new container type and you're ready to go!

  Currently available are containers using:
  PEAR::DB, PEAR::MDB, PEAR::MDB2, PECL::PDO, PEAR::XML_Tree, PEAR::Auth, Session.";s:2:"da";s:19:"2010-10-15 14:32:00";s:1:"n";s:622:"QA release
Bug #9517 Config Parameter permContainer=>storage=>PDO=>prefix doesn't work 	dufuz
Bug #13014 PHP Warning on setcookie() 	dufuz
Bug #13154 Example 4:schema validation error 	dufuz
Bug #13391 example 5 - MDB2_Schema Error in demodata.xml 	dufuz
Bug #13650 Examples (demodata script) problem 	dufuz
Doc Bug #14954 mention ACL in the description/documention 	kguest
Bug #15126 Assigning the return value of new by reference is deprecated 	doconnor
Bug #15127 Parse error: syntax error, unexpected T_RETURN in ./LiveUser/Perm/Storage/Cache 	doconnor
Bug #17723 Patch: Avoid ereg in favor of preg_match 	olleolleolle";s:1:"f";s:5:"76857";s:1:"g";s:40:"http://pear.php.net/get/LiveUser-0.16.14";s:1:"x";a:1:{s:7:"attribs";a:1:{s:10:"xlink:href";s:19:"package.0.16.14.xml";}}}